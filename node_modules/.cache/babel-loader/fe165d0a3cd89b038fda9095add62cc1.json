{"ast":null,"code":"var _jsxFileName = \"/home/humberto/Desktop/ProjectsGitPortfolio/trybeTunesProject/src/Components/MusicCard.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends Component {\n  constructor(props) {\n    super(props);\n    this.favSong = this.favSong.bind(this);\n  }\n\n  async favSong(_ref) {\n    let {\n      target\n    } = _ref;\n    const {\n      checked\n    } = target;\n    const {\n      toLoad,\n      update\n    } = this.props;\n    const { ...track\n    } = this.props;\n    const objToPass = { ...track\n    };\n    toLoad();\n\n    if (checked) {\n      await addSong(objToPass).then(update());\n    } else {\n      await removeSong(objToPass).then(update());\n    }\n  }\n\n  render() {\n    const {\n      number,\n      musicName,\n      previewUrl,\n      trackId,\n      loading,\n      checked\n    } = this.props;\n    return !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        \"data-testid\": \"audio-component\",\n        src: previewUrl,\n        controls: true,\n        children: /*#__PURE__*/_jsxDEV(\"track\", {\n          kind: \"captions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: musicName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: trackId,\n        children: [\"Favorita\", /*#__PURE__*/_jsxDEV(\"input\", {\n          \"data-testid\": `checkbox-music-${trackId}`,\n          type: \"checkbox\",\n          name: \"fav\",\n          onChange: this.favSong,\n          checked: checked,\n          id: trackId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nMusicCard.propTypes = {\n  number: PropTypes.string.isRequired,\n  musicName: PropTypes.string.isRequired,\n  previewUrl: PropTypes.string.isRequired,\n  trackId: PropTypes.string.isRequired,\n  update: PropTypes.func.isRequired,\n  toLoad: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  checked: PropTypes.bool.isRequired\n};\nexport default MusicCard;","map":{"version":3,"sources":["/home/humberto/Desktop/ProjectsGitPortfolio/trybeTunesProject/src/Components/MusicCard.jsx"],"names":["React","Component","PropTypes","addSong","removeSong","MusicCard","constructor","props","favSong","bind","target","checked","toLoad","update","track","objToPass","then","render","number","musicName","previewUrl","trackId","loading","propTypes","string","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,8BAApC;;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEY,QAAPD,OAAO,OAAa;AAAA,QAAZ;AAAEE,MAAAA;AAAF,KAAY;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAcD,MAApB;AACA,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqB,KAAKN,KAAhC;AACA,UAAM,EAAE,GAAGO;AAAL,QAAe,KAAKP,KAA1B;AACA,UAAMQ,SAAS,GAAG,EAAE,GAAGD;AAAL,KAAlB;AACAF,IAAAA,MAAM;;AACN,QAAID,OAAJ,EAAa;AACX,YAAMR,OAAO,CAACY,SAAD,CAAP,CACHC,IADG,CACEH,MAAM,EADR,CAAN;AAED,KAHD,MAGO;AACL,YAAMT,UAAU,CAACW,SAAD,CAAV,CACHC,IADG,CACEH,MAAM,EADR,CAAN;AAED;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,OALI;AAMJX,MAAAA;AANI,QAQF,KAAKJ,KART;AAUA,WAAO,CAACe,OAAD,iBACL;AAAA,8BACE;AAAA,kBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,uBAAY,iBAAnB;AAAqC,QAAA,GAAG,EAAGE,UAA3C;AAAwD,QAAA,QAAQ,MAAhE;AAAA,+BACE;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAA,kBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAO,QAAA,OAAO,EAAGE,OAAjB;AAAA,4CAEE;AACE,yBAAe,kBAAiBA,OAAQ,EAD1C;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,IAAI,EAAC,KAHP;AAIE,UAAA,QAAQ,EAAG,KAAKb,OAJlB;AAKE,UAAA,OAAO,EAAGG,OALZ;AAME,UAAA,EAAE,EAAGU;AANP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AArD+B;;AAwDlChB,SAAS,CAACkB,SAAV,GAAsB;AACpBL,EAAAA,MAAM,EAAEhB,SAAS,CAACsB,MAAV,CAAiBC,UADL;AAEpBN,EAAAA,SAAS,EAAEjB,SAAS,CAACsB,MAAV,CAAiBC,UAFR;AAGpBL,EAAAA,UAAU,EAAElB,SAAS,CAACsB,MAAV,CAAiBC,UAHT;AAIpBJ,EAAAA,OAAO,EAAEnB,SAAS,CAACsB,MAAV,CAAiBC,UAJN;AAKpBZ,EAAAA,MAAM,EAAEX,SAAS,CAACwB,IAAV,CAAeD,UALH;AAMpBb,EAAAA,MAAM,EAAEV,SAAS,CAACwB,IAAV,CAAeD,UANH;AAOpBH,EAAAA,OAAO,EAAEpB,SAAS,CAACyB,IAAV,CAAeF,UAPJ;AAQpBd,EAAAA,OAAO,EAAET,SAAS,CAACyB,IAAV,CAAeF;AARJ,CAAtB;AAWA,eAAepB,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\n\nclass MusicCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.favSong = this.favSong.bind(this);\n  }\n\n  async favSong({ target }) {\n    const { checked } = target;\n    const { toLoad, update } = this.props;\n    const { ...track } = this.props;\n    const objToPass = { ...track };\n    toLoad();\n    if (checked) {\n      await addSong(objToPass)\n        .then(update());\n    } else {\n      await removeSong(objToPass)\n        .then(update());\n    }\n  }\n\n  render() {\n    const {\n      number,\n      musicName,\n      previewUrl,\n      trackId,\n      loading,\n      checked,\n\n    } = this.props;\n\n    return !loading && (\n      <div>\n        <span>{number}</span>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n        </audio>\n        <p>{musicName}</p>\n        <label htmlFor={ trackId }>\n          Favorita\n          <input\n            data-testid={ `checkbox-music-${trackId}` }\n            type=\"checkbox\"\n            name=\"fav\"\n            onChange={ this.favSong }\n            checked={ checked }\n            id={ trackId }\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  number: PropTypes.string.isRequired,\n  musicName: PropTypes.string.isRequired,\n  previewUrl: PropTypes.string.isRequired,\n  trackId: PropTypes.string.isRequired,\n  update: PropTypes.func.isRequired,\n  toLoad: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  checked: PropTypes.bool.isRequired,\n\n};\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}